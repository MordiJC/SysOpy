DEBUG = 0

SANITIZER = NONE

ifeq ($(SANITIZER),ADDRESS)

SANITIZER_FLAGS = -fsanitize=address
SANITIZER_LIBS = -lasan

else ifeq ($(SANITIZER),UNDEFINED)

SANITIZER_FLAGS = -fsanitize=undefined
SANITIZER_LIBS = -lubsan

else ifeq ($(SANITIZER),LEAK)

SANITIZER_FLAGS = -fsanitize=leaks
SANITIZER_LIBS = 

endif

ifeq ($(DEBUG),1)

DEBUG_FLAGS = -g -O0

else

DEBUG_FLAGS = -O2

endif

CC = gcc 
CFLAGS = --std=c11 -Wall -Wextra -fPIC -pedantic -Wall \
	-Wno-missing-braces -Wextra -Wno-missing-field-initializers -Wformat=2 \
	-Wswitch-default -Wswitch-enum -Wcast-align -Wpointer-arith \
	-Wbad-function-cast -Wstrict-overflow=5 -Wstrict-prototypes -Winline \
	-Wundef -Wnested-externs -Wcast-qual -Wshadow -Wunreachable-code \
	-Wlogical-op -Wfloat-equal -Wstrict-aliasing=2 -Wredundant-decls \
	-Wold-style-definition -Werror \
	-fno-omit-frame-pointer -ffloat-store -fno-common -fstrict-aliasing \
	$(SANITIZER_FLAGS) $(DEBUG_FLAGS) $(MYFLAGS)
LDFLAGS = $(SANITIZER_LIBS)
RM = rm -r
ECHO = echo -e

OUT = master
CORE_O = master.o

SOUT = slave
SCORE_O = slave.o

.PHONY: all

all: $(OUT) $(SOUT)

$(OUT): $(CORE_O)
	$(CC) $? -o $@ $(LDFLAGS)

$(SOUT): $(SCORE_O)
	$(CC) $? -o $@ $(LDFLAGS)

.PHONY: clean

clean:
	$(RM) ./*.o ./$(OUT) ./$(SOUT)

.PHONY: depend

depend:
	$(CC) -MM ./*.c

# Generated by `depend'
master.o: master.c
slave.o: slave.c